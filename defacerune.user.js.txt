// ==UserScript==
// @name        defacerune
// @author      NunoF <self@nunof.eu>
// @namespace   self@nunof.eu
// @description defacing websites for poetry sake, making runes
// @version     1.1
// @require     https://code.jquery.com/jquery-1.12.4.min.js
// @require     https://raw.githubusercontent.com/techfort/LokiJS/master/build/lokijs.min.js
// @require     https://raw.githubusercontent.com/Stuk/jszip/master/dist/jszip.min.js
// @resource    poemizerzip https://telepoesis.net/nunof/poemizer.zip
// @include     http://eliterature.org/*
// @include     http://www.eliterature.org/*
// @grant       GM.getResourceUrl
// ==/UserScript==
//
// ******************************************************************************
// @licstart
// The following is the entire license notice for the JavaScript code in this page.
//
//  poemizer.user.js
//  Copyright (C) 2014  Nuno Ferreira - self@nunof.eu
//
//  The JavaScript code in this page is free software: you can
//  redistribute it and/or modify it under the terms of the GNU
//  General Public License (GNU GPL) as published by the Free Software
//  Foundation, either version 3 of the License, or (at your option)
//  any later version.  The code is distributed WITHOUT ANY WARRANTY;
//  without even the implied warranty of MERCHANTABILITY or FITNESS
//  FOR A PARTICULAR PURPOSE.  See the GNU GPL for more details.
//
//  As additional permission under GNU GPL version 3 section 7, you
//  may distribute non-source (e.g., minimized or compacted) forms of
//  that code without the copy of the GNU GPL normally required by
//  section 4, provided you include this license notice and a URL
//  through which recipients can access the Corresponding Source.
//
// @licend
// The above is the entire license notice for the JavaScript code in this page.
//
// ******************************************************************************
//

this.$ = this.jQuery = jQuery.noConflict(true);

var w_width = $(window).width();
var w_height = $(window).height();
var objobj = get_text_nodes();
var db = new loki('RealNews');
var nouns;
var verbs;
var adverbs;
var adjectives;
$(window).bind('resize', resize_window(null));
//trace("START");
load_db_and_start();


// ********************************** //
//     script internal functions
// ********************************** //

function main() {

    //trace("main loop is starting");
    setInterval(function() {
       objobj.each(function(index) {
           var num_words = $(this).text().split(" ").length;
           if (num_words > 1) {
               var word_pos = get_natural(num_words) - 1;
               var atmp = $(this).text().split(" ");
               var tmps = atmp[word_pos];
               if (tmps.length == 0) return;
               var capitalized = (tmps.charAt(0) == tmps.charAt(0).toUpperCase());
               tmps = tmps.toLowerCase();
               //trace("word to replace is " + tmps)

               var newid;
               var word_new;
             
               var rs = nouns.find( {'entry': tmps } );
               //trace(rs);
               if (rs.length > 0) {
                  //trace("which is a noun");
                  newid = get_natural(nouns.data.length);
               		word_new = nouns.get(newid);
                  if (word_new == null) {
                  	//trace("noun get "+newid+" is null");
                    return;
                  }
                  atmp[word_pos-1] = capitalized ? first_caps(word_new.entry) : word_new.entry;
               		$(this).last()[0].textContent= atmp.join(" ");
                  return;
               }
             /*
		       		 rs = verbs.find( {'entry': tmps } );
               if (rs.length > 0) {
                 trace("which is a verb");
                  newid = get_natural(verbs.data.length);
               		word_new = verbs.get(newid);
                    if (word_new == null) {
                        //trace("verb get "+newid+" is null");
                        return;
                    }

                    atmp[word_pos-1] = capitalized ? first_caps(word_new.entry) : word_new.entry;
               		$(this).last()[0].textContent= atmp.join(" ");
                   	return;
               }

		           rs = adverbs.find( {'entry': tmps } );
               if (rs.length > 0) {
                 trace("which is an adverb");
                  newid = get_natural(adverbs.data.length);
               		word_new = adverbs.get(newid);
                    if (word_new == null) {
                        //trace("adverb get "+newid+" is null");
                        return;
                    }

               		atmp[word_pos-1] = capitalized ? first_caps(word_new.entry) : word_new.entry;
               		$(this).last()[0].textContent= atmp.join(" ");
                   	return;
               }
						*/
               rs = adjectives.find( {'entry': tmps } );
               if (rs.length > 0) {
                  //trace("which is an adjective");
                  newid = get_natural(adjectives.data.length);
               		word_new = adjectives.get(newid);
                  if (word_new == null) {
                  	//trace("adjective get "+newid+" is null");
                    return;
                  }

               		atmp[word_pos-1] = capitalized ? first_caps(word_new.entry) : word_new.entry;
               		$(this).last()[0].textContent= atmp.join(" ");
                  return;
               }
           }
       });
   }, 5000);

}

function first_caps(word)
{
    return word.charAt(0).toUpperCase() + word.slice(1);
}


function get_text_nodes() {
    return $('*', 'body').contents().filter(function() { return this.nodeType === 3; });
}

function get_natural(top) {
    return Math.floor((Math.random() * top) + 1);
}

function resize_window(e) {
    w_height = $(window).height();
    w_width = $(window).width() -400/4;
}


function trace(message){
    if(typeof console !== 'undefined' && console.log){ console.log(message); }
}

function process_and_go(json_data) {
  //trace("json length " + json_data.length);
  //trace(json_data);
  if (json_data.length > 0) {
  	db.loadJSON(json_data);
    nouns = db.getCollection('nouns');
    verbs = db.getCollection('verbs');
    adverbs = db.getCollection('adverbs');
    adjectives = db.getCollection('adjectives');

    main();
  }
  else { 
    trace("ERROR: empty json object")
  }
}


function load_db_and_start() {

	var a = GM.getResourceUrl("poemizerzip").then(function(url) {
    fetch(url).then(function(r1) {
      r1.arrayBuffer().then(function(r2) {
        JSZip.loadAsync(r2).then(function(zip) {
          zip.file("poemizer.db").async("string").then(function(json_data) { process_and_go(json_data); });
        })
      })
    })
  })
  .catch((err) => { trace(err); });
}


